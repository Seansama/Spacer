# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Ruby on Rails CI"
on:
  workflow_dispatch:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
jobs:
  rspec:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install postgresql postgresql-contrib libpq-dev -y
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.4'
      - name: Set up PostgreSQL
        uses: docker-compose@v2
        with:
          compose-file: docker-compose.ci.yml
          service-name: db
          run: |
            psql -h localhost -U postgres -c 'CREATE DATABASE Spacer_test;'
            psql -h localhost -U postgres -c "CREATE USER seansama WITH PASSWORD '$Lara$00$sM';"
            psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE Spacer_test TO seansama;"
      - name: Set up environment variables
        env:
          DATABASE_NAME: Spacer_test
          DATABASE_USERNAME: seansama
          DATABASE_PASSWORD: $Lara$00$sM
          DATABASE_HOST: localhost
        run: |
          echo "export DATABASE_NAME=${{ env.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "export DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}" >> $GITHUB_ENV
          echo "export DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "export DATABASE_HOST=${{ env.DATABASE_HOST }}" >> $GITHUB_ENV
      - run: bundle install
      - env:
          DATABASE_URL: postgres://${{ env.DATABASE_USERNAME }}:${{ env.DATABASE_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.DATABASE_NAME }}
        run: bundle exec rails db:migrate RAILS_ENV=test
      - env:
          DATABASE_URL: postgres://${{ env.DATABASE_USERNAME }}:${{ env.DATABASE_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.DATABASE_NAME }}
        run: bundle exec rspec spec
